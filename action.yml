name: PHP Composer with Cache
author: Sam Anthony

inputs:
  GITHUB_TOKEN:
    description: Pass in the GITHUB_TOKEN
    required: true
  deployment_environment:
    description: The GitHub Deployment environment
    required: true
  deployment_status:
    description: The GitHub Deployment status, e.g FAILURE,
    required: true


runs:
  using: "composite"
  steps:

    # Query Github GraphQL API for recent deployment for a specified environment
    - name: Query Github API for recent deployments
      uses: octokit/graphql-action@v2.x
      id: api-request
      with:
        query: |
          query ($repo_owner: String!, $repo_name: String!,  $deployment_environment: String!) {
            repository(owner: $repo_owner, name: $repo_name) {
              deployments(orderBy: {field: CREATED_AT, direction: DESC}, first: 100, environments: [$deployment_environment]) {
                nodes {
                  description,
                  createdAt,
                  environment,
                  latestEnvironment,
                  latestStatus {
                    description,
                    state
                  }
                  ref {
                    name,
                    prefix
                  }
                }
              }
            }
          }
        variables: |
          repo_owner: "${{ github.repository_owner }}"
          repo_name: "${{ github.event.repository.name }}"
          deployment_environment: "${{ inputs.deployment_environment }}"
# NOTE: Above, its is not clear if ${{ github.repository_owner }} is the owner of this repository or the owner of the repository which
# invoked this action. Previously this was using ${{ github.event.repository.owner.name }} however when running a workflow via "on.workflow_dispatch",
# this value seemed to be empty seemed to be empty. This potential issue might be solved by forcing the "calling" workflow to pass
# the specific repo owner and repo name
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}

    - name: Dump raw API response
      shell: bash
      run: |
        echo '${{ steps.api-request.outputs.data }}'

    # Further refine the results from the API request. Get the most recent successful deployment which was deployed from a tag.
    # Get only the most recent deployment and add a few of its parameters to a .env file (The .env file will be parsed in a later step
    - name: Further filter/parse the GraphQL response
      shell: bash
      run: |
        mkdir ${{ runner.temp }}/dotenv
        echo '${{ steps.api-request.outputs.data }}' | jq -r '[ .repository.deployments.nodes[] | select(.latestStatus.state == "SUCCESS" and .ref.prefix == "refs/tags/") ] | limit(1;.[]) | {deployment_created_at: .createdAt, deployment_ref_name: .ref.name}  | to_entries | map("\(.key)=\(.value)") | .[]' > ${{ runner.temp }}/dotenv/.env
        cat ${{ runner.temp }}/dotenv/.env

    - name: Load dotenv file
      uses: xom9ikk/dotenv@v2
      with:
        path: ${{ runner.temp }}/dotenv

    - name: Vars from latest deployment
      shell: bash
      run: |
        echo "deployment_created_at"
        echo "${{ env.deployment_created_at }}"
        echo "deployment_ref_name"
        echo "${{ env.deployment_ref_name }}"
